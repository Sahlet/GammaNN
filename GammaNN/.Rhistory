test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
library(GammaNN)
library(GammaNN)
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
library(GammaNN)
library(GammaNN)
test()
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
test()
test()
library(GammaNN)
test()
test()
library(GammaNN)
test()
test()
test()
test()
test()
test()
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
test()
test()
test()
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
library(GammaNN)
test()
library(GammaNN)
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
test()
test()
test()
test()
test()
test()
test()
library(GammaNN)
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
library(GammaNN)
test()
test()
test()
test()
test()
test()
test()
library(GammaNN)
test()
test()
test()
test()
test()
library(GammaNN)
test()
test()
library(GammaNN)
library(GammaNN)
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
library(GammaNN)
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
library(GammaNN)
test()
library(GammaNN)
library(GammaNN)
test()
library(GammaNN)
test()
test()
test()
test()
library(GammaNN)
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
library(GammaNN)
test()
test()
test()
test()
test()
test()
test()
test()
library(GammaNN)
test()
library(GammaNN)
library(GammaNN)
test()
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
test()
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
test()
library(GammaNN)
test()
test()
test()
library(GammaNN)
test()
library(GammaNN)
test()
test()
library(GammaNN)
test()
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
frame<- data.frame("../windpower_without_date.csv")
View(frame)
frame<- read.csv("../windpower_without_date.csv")
hidden <- c(2, 2)
learn(frame, hidden, 1, 1);
learn(frame, hidden, 1, 1);
library(GammaNN)
learn(frame, hidden, 1, 1);
library(GammaNN)
learn(frame, hidden, 1, 1);
colnames(frame)
learn(frame, hidden, 1, 1);
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
learn(frame, hidden, 1, 1);
learn(frame, hidden, 1, 1);
learn(frame, hidden, 1, 1);
library(GammaNN)
learn(frame, hidden, 1, 1);
library(GammaNN)
learn(frame, hidden, 1, 1);
learn(frame, hidden, 1, 1);
library(GammaNN)
head(frame);
frame[1, 1]
frame[1, 2]
library(GammaNN)
learn(frame, hidden, 0, 1, 0.01, FALSE, 1);
learn(head(frame, n = 10), hidden, 0, 1, 0.01, 1, FALSE);
library(GammaNN)
learn(head(frame, n = 10), hidden, 0, 1, 0.01, 1, FALSE);
library(GammaNN)
learn(head(frame, n = 10), hidden, 0, 1, 0.01, 1, FALSE);
learn(head(frame, n = 10), hidden, 0, 1, 0.01, 1, FALSE);
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
to_str()
to_str(c())
library(GammaNN)
test()
library(GammaNN)
test()
library(GammaNN)
library(GammaNN)
test()
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
library(GammaNN)
